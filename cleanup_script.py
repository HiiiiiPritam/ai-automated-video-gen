#!/usr/bin/env python3
"""
Standalone Cleanup Script for AI Video Generator

This script can be run manually or scheduled to clean up result folders
and temporary files generated by the video generation process.

Usage:
  python cleanup_script.py                    # Run scheduled cleanup
  python cleanup_script.py --stats            # Show cleanup statistics only
  python cleanup_script.py --old-only         # Clean only old files (24h+)
  python cleanup_script.py --temp-only        # Clean only temporary files
  python cleanup_script.py --all              # Deep clean everything
  python cleanup_script.py --folder "path"    # Clean specific folder
"""

import argparse
import sys
import os
from datetime import datetime

# Add backend_functions to path
sys.path.append(os.path.join(os.path.dirname(__file__), 'backend_functions'))

def main():
    parser = argparse.ArgumentParser(description='Cleanup script for AI Video Generator')
    parser.add_argument('--stats', action='store_true', help='Show cleanup statistics only')
    parser.add_argument('--old-only', action='store_true', help='Clean only old files (24h+)')
    parser.add_argument('--temp-only', action='store_true', help='Clean only temporary files')
    parser.add_argument('--all', action='store_true', help='Deep clean everything')
    parser.add_argument('--folder', type=str, help='Clean specific folder path')
    parser.add_argument('--max-age', type=int, default=24, help='Maximum age in hours for old cleanup (default: 24)')
    parser.add_argument('--keep-video', action='store_true', help='Keep final video files during cleanup')
    
    args = parser.parse_args()
    
    try:
        # Import cleanup utilities
        from cleanup_utils import (
            get_cleanup_stats, 
            cleanup_old_results, 
            cleanup_temporary_files,
            cleanup_result_folder,
            scheduled_cleanup
        )
        
        print("AI Video Generator Cleanup Script")
        print(f"Started at: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
        print("=" * 60)
        
        if args.stats:
            # Show statistics only
            print("Getting cleanup statistics...")
            stats = get_cleanup_stats()
            
            if stats.get("error"):
                print(f"Error getting stats: {stats['error']}")
                return 1
            
            print(f"Total result folders: {stats.get('total_folders', 0)}")
            print(f"Total storage used: {stats.get('total_size_mb', 0):.2f} MB")
            
            if stats.get('oldest_folder'):
                print(f"Oldest folder: {stats['oldest_folder']['name']} ({stats['oldest_folder']['created']})")
            
            if stats.get('newest_folder'):
                print(f"Newest folder: {stats['newest_folder']['name']} ({stats['newest_folder']['created']})")
            
            if stats.get('large_folders'):
                print(f"Large folders (>50MB):")
                for folder in stats['large_folders']:
                    print(f"   - {folder['name']}: {folder['size_mb']} MB")
            
            return 0
        
        elif args.folder:
            # Clean specific folder
            print(f"Cleaning specific folder: {args.folder}")
            success = cleanup_result_folder(args.folder, keep_final_video=args.keep_video)
            
            if success:
                print(f"Successfully cleaned folder: {args.folder}")
                return 0
            else:
                print(f"Failed to clean folder: {args.folder}")
                return 1
        
        elif args.old_only:
            # Clean only old files
            print(f"Cleaning result folders older than {args.max_age} hours...")
            cleaned_count = cleanup_old_results(max_age_hours=args.max_age)
            print(f"Cleaned {cleaned_count} old result folders")
            return 0
        
        elif args.temp_only:
            # Clean only temporary files
            print("Cleaning temporary files...")
            cleaned_count = cleanup_temporary_files()
            print(f"Cleaned {cleaned_count} temporary files")
            return 0
        
        elif args.all:
            # Deep clean everything
            print("Performing deep cleanup...")
            
            # Clean old results
            old_cleaned = cleanup_old_results(max_age_hours=1)  # Very aggressive - 1 hour
            print(f"Cleaned {old_cleaned} old result folders")
            
            # Clean temporary files
            temp_cleaned = cleanup_temporary_files()
            print(f"Cleaned {temp_cleaned} temporary files")
            
            print(f"Deep cleanup completed: {old_cleaned} folders, {temp_cleaned} temp files")
            return 0
        
        else:
            # Default scheduled cleanup
            print("Running scheduled cleanup...")
            result = scheduled_cleanup()
            
            print("Scheduled cleanup completed:")
            print(f"   Old folders cleaned: {result.get('old_folders_cleaned', 0)}")
            print(f"   Temp files cleaned: {result.get('temp_files_cleaned', 0)}")
            
            current_stats = result.get('current_stats', {})
            print(f"   Current result folders: {current_stats.get('total_folders', 0)}")
            print(f"   Current storage used: {current_stats.get('total_size_mb', 0):.2f} MB")
            
            return 0
    
    except ImportError as e:
        print(f"Import error: {e}")
        print("Make sure you're running this from the project root directory")
        return 1
    
    except Exception as e:
        print(f"Cleanup failed: {e}")
        return 1
    
    finally:
        print("=" * 60)
        print(f"Finished at: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")

if __name__ == "__main__":
    exit_code = main()
    sys.exit(exit_code)