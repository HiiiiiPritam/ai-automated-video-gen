#!/usr/bin/env python3
"""
YouTube Upload Integration - Uploads videos with dynamic titles and descriptions
"""

import os
import sys
import json
import logging
from datetime import datetime
from pathlib import Path
from typing import Dict, Any, Optional
import argparse

# Google API imports (uncomment when you install the google-auth-oauthlib and google-api-python-client packages)
# from google.auth.transport.requests import Request
# from google.oauth2.credentials import Credentials
# from google_auth_oauthlib.flow import InstalledAppFlow
# from googleapiclient.discovery import build
# from googleapiclient.errors import HttpError
# from googleapiclient.http import MediaFileUpload

class YouTubeUploader:
    """
    YouTube uploader with dynamic titles and descriptions from video metadata
    """
    
    def __init__(self):
        self.setup_logging()
        
        # YouTube API settings
        self.SCOPES = ['https://www.googleapis.com/auth/youtube.upload']
        self.CLIENT_SECRETS_FILE = "client_secret.json"  # Download from Google Cloud Console
        self.credentials = None
        self.youtube_service = None
        
    def setup_logging(self):
        """Setup logging"""
        logging.basicConfig(
            level=logging.INFO,
            format='%(asctime)s - %(levelname)s - %(message)s'
        )
        self.logger = logging.getLogger(__name__)
    
    def authenticate(self) -> bool:
        """
        Authenticate with YouTube API
        
        Returns:
            bool: True if authentication successful
        """
        try:
            # Check if we have valid credentials
            if os.path.exists('token.json'):
                self.credentials = Credentials.from_authorized_user_file('token.json', self.SCOPES)
            
            # If there are no (valid) credentials available, let the user log in
            if not self.credentials or not self.credentials.valid:
                if self.credentials and self.credentials.expired and self.credentials.refresh_token:
                    self.credentials.refresh(Request())
                else:
                    if not os.path.exists(self.CLIENT_SECRETS_FILE):
                        self.logger.error(f"Client secrets file not found: {self.CLIENT_SECRETS_FILE}")
                        self.logger.error("Please download client_secret.json from Google Cloud Console")
                        return False
                    
                    flow = InstalledAppFlow.from_client_secrets_file(
                        self.CLIENT_SECRETS_FILE, self.SCOPES
                    )
                    self.credentials = flow.run_local_server(port=0)
                
                # Save the credentials for the next run
                with open('token.json', 'w') as token:
                    token.write(self.credentials.to_json())
            
            # Build the YouTube service
            self.youtube_service = build('youtube', 'v3', credentials=self.credentials)
            self.logger.info("YouTube API authentication successful")
            return True
            
        except Exception as e:
            self.logger.error(f"YouTube authentication failed: {e}")
            return False
    
    def upload_video_from_metadata(self, metadata_file: str) -> Dict[str, Any]:
        """
        Upload video using metadata file generated by the video generator
        
        Args:
            metadata_file: Path to the JSON metadata file
            
        Returns:
            Dictionary with upload results
        """
        try:
            # Load metadata
            with open(metadata_file, 'r', encoding='utf-8') as f:
                metadata = json.load(f)
            
            video_info = metadata['video_info']
            video_file = video_info.get('final_video')
            
            if not video_file or not os.path.exists(video_file):
                raise Exception(f"Video file not found: {video_file}")
            
            # Prepare upload data
            upload_data = {
                'title': metadata['video_title'],
                'description': metadata['description'],
                'tags': self.extract_tags(metadata),
                'category_id': '23',  # Comedy category
                'privacy_status': 'private'  # Start as private, can be changed later
            }
            
            result = self.upload_video(video_file, upload_data)
            
            if result['success']:
                # Update metadata with YouTube info
                metadata['youtube_upload'] = {
                    'video_id': result['video_id'],
                    'video_url': f"https://www.youtube.com/watch?v={result['video_id']}",
                    'uploaded_at': datetime.now().isoformat(),
                    'upload_title': upload_data['title'],
                    'upload_status': 'success'
                }
                
                # Save updated metadata
                with open(metadata_file, 'w', encoding='utf-8') as f:
                    json.dump(metadata, f, indent=2, ensure_ascii=False)
                
                self.logger.info(f"Video uploaded successfully: {result['video_url']}")
            
            return result
            
        except Exception as e:
            self.logger.error(f"Failed to upload video from metadata {metadata_file}: {e}")
            return {
                'success': False,
                'error': str(e)
            }
    
    def upload_video(self, video_file: str, upload_data: Dict[str, Any]) -> Dict[str, Any]:
        """
        Upload video to YouTube
        
        Args:
            video_file: Path to video file
            upload_data: Upload metadata (title, description, tags, etc.)
            
        Returns:
            Dictionary with upload results
        """
        if not self.youtube_service:
            if not self.authenticate():
                return {'success': False, 'error': 'Authentication failed'}
        
        try:
            self.logger.info(f"Starting upload: {upload_data['title']}")
            
            # Prepare the request body
            body = {
                'snippet': {
                    'title': upload_data['title'],
                    'description': upload_data['description'],
                    'tags': upload_data.get('tags', []),
                    'categoryId': upload_data.get('category_id', '23')
                },
                'status': {
                    'privacyStatus': upload_data.get('privacy_status', 'private')
                }
            }
            
            # Create media upload
            media = MediaFileUpload(
                video_file,
                chunksize=-1,
                resumable=True,
                mimetype='video/*'
            )
            
            # Execute the upload
            upload_request = self.youtube_service.videos().insert(
                part=','.join(body.keys()),
                body=body,
                media_body=media
            )
            
            response = None
            error = None
            retry = 0
            
            while response is None:
                try:
                    self.logger.info(f"Upload attempt {retry + 1}")
                    status, response = upload_request.next_chunk()
                    if status:
                        self.logger.info(f"Upload progress: {int(status.progress() * 100)}%")
                except HttpError as e:
                    if e.resp.status in [500, 502, 503, 504]:
                        # Retriable error
                        retry += 1
                        if retry > 3:
                            raise e
                        self.logger.warning(f"Retriable error occurred: {e}, retrying...")
                        continue
                    else:
                        raise e
            
            if response:
                video_id = response['id']
                video_url = f"https://www.youtube.com/watch?v={video_id}"
                
                return {
                    'success': True,
                    'video_id': video_id,
                    'video_url': video_url,
                    'upload_response': response
                }
            else:
                return {
                    'success': False,
                    'error': 'Upload completed but no response received'
                }
                
        except HttpError as e:
            error_message = f"HTTP Error {e.resp.status}: {e.content.decode()}"
            self.logger.error(f"YouTube upload failed: {error_message}")
            return {
                'success': False,
                'error': error_message
            }
        except Exception as e:
            error_message = str(e)
            self.logger.error(f"Upload failed: {error_message}")
            return {
                'success': False,
                'error': error_message
            }
    
    def extract_tags(self, metadata: Dict[str, Any]) -> list:
        """Extract tags from metadata"""
        tags = []
        
        # Add humor type as tag
        original_content = metadata.get('original_content', {})
        humor_type = original_content.get('humor_type', '')
        if humor_type:
            tags.append(humor_type.replace('_', ' ').title())
        
        # Add category as tag
        category = original_content.get('category', '')
        if category:
            tags.append(category.title())
        
        # Add default tags
        default_tags = [
            'Comedy', 'Satire', 'Entertainment', 'Humor', 
            'Daily Mash', 'Satirical Content', 'AI Generated'
        ]
        tags.extend(default_tags)
        
        # Remove duplicates and return first 10 tags (YouTube limit)
        unique_tags = list(dict.fromkeys(tags))
        return unique_tags[:10]
    
    def upload_latest_video(self) -> Dict[str, Any]:
        """
        Upload the most recent video from video_metadata directory
        
        Returns:
            Dictionary with upload results
        """
        try:
            metadata_dir = Path("video_metadata")
            if not metadata_dir.exists():
                return {
                    'success': False,
                    'error': 'No video_metadata directory found'
                }
            
            # Find the most recent metadata file
            metadata_files = list(metadata_dir.glob("*.json"))
            if not metadata_files:
                return {
                    'success': False,
                    'error': 'No metadata files found'
                }
            
            # Sort by creation time and get the latest
            latest_file = max(metadata_files, key=lambda f: f.stat().st_ctime)
            
            self.logger.info(f"Uploading video from latest metadata: {latest_file.name}")
            return self.upload_video_from_metadata(str(latest_file))
            
        except Exception as e:
            return {
                'success': False,
                'error': f"Failed to upload latest video: {e}"
            }


def main():
    """Main function for command line usage"""
    parser = argparse.ArgumentParser(description="YouTube Video Uploader")
    parser.add_argument('--metadata-file', help='Path to metadata JSON file')
    parser.add_argument('--upload-latest', action='store_true', help='Upload the most recent video')
    parser.add_argument('--setup-auth', action='store_true', help='Setup YouTube API authentication')
    
    args = parser.parse_args()
    
    uploader = YouTubeUploader()
    
    if args.setup_auth:
        print("Setting up YouTube API authentication...")
        if uploader.authenticate():
            print("✓ Authentication successful!")
            print("You can now upload videos to YouTube.")
        else:
            print("✗ Authentication failed!")
            print("Make sure you have:")
            print("1. Downloaded client_secret.json from Google Cloud Console")
            print("2. Enabled YouTube Data API v3")
            print("3. Set up OAuth 2.0 credentials")
        return
    
    if args.upload_latest:
        result = uploader.upload_latest_video()
    elif args.metadata_file:
        result = uploader.upload_video_from_metadata(args.metadata_file)
    else:
        print("Please specify --metadata-file or --upload-latest")
        parser.print_help()
        return
    
    if result['success']:
        print(f"✓ Upload successful!")
        print(f"Video URL: {result.get('video_url', 'N/A')}")
        print(f"Video ID: {result.get('video_id', 'N/A')}")
    else:
        print(f"✗ Upload failed: {result['error']}")


if __name__ == "__main__":
    main()