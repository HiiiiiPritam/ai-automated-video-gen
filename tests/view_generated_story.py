#!/usr/bin/env python3
"""
View Generated Story Output - Shows the complete story generation process
"""

import json
import sys
import os
from datetime import datetime

# Add current directory to path
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

def display_story_output():
    """Display the complete story generation output in a readable format"""
    
    try:
        from integrated_daily_mash_system import IntegratedDailyMashSystem
        
        print("=" * 80)
        print("DAILY MASH STORY GENERATION - COMPLETE OUTPUT")
        print("=" * 80)
        print(f"Generated at: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
        print("=" * 80)
        
        # Initialize system
        system = IntegratedDailyMashSystem()
        
        # Fetch satirical content
        print("\n[FETCH] FETCHING SATIRICAL CONTENT...")
        print("-" * 50)
        content_items = system.fetch_daily_mash_content(limit=1)
        
        if not content_items:
            print("[ERROR] No content found!")
            return
        
        content = content_items[0]
        
        # Display original content
        print(f"\n[ARTICLE] ORIGINAL SATIRICAL ARTICLE")
        print("-" * 50)
        print(f"Title: {content['title']}")
        print(f"Category: {content['category']}")
        print(f"Humor Type: {content['humor_type']}")
        print(f"Word Count: {content['word_count']}")
        print(f"Link: {content['link']}")
        print(f"\nFull Content:")
        print("-" * 30)
        print(content['full_content'])
        
        # Generate enhanced script
        print(f"\n\n[SCRIPT] GENERATING ENHANCED VIDEO SCRIPT...")
        print("-" * 50)
        script_data = system.generate_enhanced_video_script(content, num_segments=4, duration_per_segment=5.0)
        
        # Display generated script
        print(f"\n[GENERATED] GENERATED VIDEO SCRIPT")
        print("=" * 50)
        print(f"Video Title: {script_data['title']}")
        print(f"Style: {script_data['style']}")
        print(f"Total Duration: {script_data['total_duration']:.1f} seconds")
        print(f"Number of Segments: {script_data['segment_count']}")
        print(f"Generated By: {script_data['generated_by']}")
        
        if 'overall_theme' in script_data:
            print(f"Theme: {script_data['overall_theme']}")
        if 'target_audience' in script_data:
            print(f"Target Audience: {script_data['target_audience']}")
        
        print(f"\n[TEXT] COMPLETE SCRIPT TEXT:")
        print("-" * 30)
        print(script_data['Text'])
        
        print(f"\n[SEGMENTS] DETAILED SEGMENT BREAKDOWN:")
        print("=" * 50)
        
        for i, segment in enumerate(script_data['sentences'], 1):
            print(f"\n--- SEGMENT {i} ---")
            print(f"Text: {segment['sentence']}")
            print(f"Duration: {segment['duration']/10000000:.1f} seconds")
            print(f"Word Count: {segment['word_count']}")
            print(f"Character Count: {segment['char_count']}")
            
            if 'visual_suggestion' in segment:
                print(f"Visual Suggestion: {segment['visual_suggestion']}")
            if 'tone' in segment:
                print(f"Delivery Tone: {segment['tone']}")
        
        # Show source attribution
        if 'source_content' in script_data:
            source = script_data['source_content']
            print(f"\n[SOURCE] SOURCE ATTRIBUTION:")
            print("-" * 30)
            print(f"Original Title: {source.get('original_title', 'N/A')}")
            print(f"Original Link: {source.get('original_link', 'N/A')}")
            print(f"Humor Type: {source.get('humor_type', 'N/A')}")
            print(f"Category: {source.get('category', 'N/A')}")
        
        # Create video request
        print(f"\n[VIDEO] VIDEO GENERATION REQUEST:")
        print("=" * 50)
        video_request = system.create_video_generation_request(script_data)
        
        # Display key request info
        print(f"Topic: {video_request['topic']}")
        print(f"Style: {video_request['style']}")
        print(f"Segments: {video_request['num_segments']}")
        print(f"Source Type: {video_request['source_type']}")
        print(f"Humor Type: {video_request['humor_type']}")
        print(f"Satirical Context: {video_request['satirical_context']}")
        
        print(f"\n[JSON] COMPLETE JSON OUTPUT:")
        print("-" * 30)
        print(json.dumps({
            'original_article': {
                'title': content['title'],
                'content': content['full_content'],
                'humor_type': content['humor_type'],
                'category': content['category']
            },
            'generated_script': script_data,
            'video_request': video_request
        }, indent=2))
        
        print("\n" + "=" * 80)
        print("[SUCCESS] STORY GENERATION COMPLETE!")
        print("=" * 80)
        
    except Exception as e:
        print(f"[ERROR] Error: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    display_story_output()