#!/usr/bin/env python3
"""
Test script for the integrated Daily Mash system
Tests content fetching and script generation before frontend integration
"""

import json
import sys
import os
from datetime import datetime

# Add the current directory to the path so we can import our modules
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

def test_daily_mash_content_fetching():
    """Test fetching content from The Daily Mash RSS feed"""
    print("=" * 60)
    print("TESTING: Daily Mash Content Fetching")
    print("=" * 60)
    
    try:
        from integrated_daily_mash_system import IntegratedDailyMashSystem
        
        system = IntegratedDailyMashSystem()
        print(f"[OK] System initialized successfully")
        
        # Test fetching satirical content
        print("\n[NEWS] Fetching latest satirical content from The Daily Mash...")
        content_items = system.fetch_daily_mash_content(limit=3)
        
        if not content_items:
            print("[ERROR] No content items found")
            return False
        
        print(f"[OK] Found {len(content_items)} satirical content items")
        
        # Display the content items
        for i, item in enumerate(content_items, 1):
            print(f"\n--- Content Item {i} ---")
            print(f"Title: {item['title']}")
            print(f"Humor Type: {item['humor_type']}")
            print(f"Content Preview: {item['full_content'][:100]}...")
            print(f"Content Length: {len(item['full_content'])} characters")
            print(f"Video Ready: {item['video_ready']}")
        
        return content_items
        
    except Exception as e:
        print(f"[ERROR] Error testing Daily Mash content fetching: {e}")
        import traceback
        traceback.print_exc()
        return False

def test_gemini_script_generation(content_item):
    """Test Gemini script generation with satirical content"""
    print("\n" + "=" * 60)
    print("TESTING: Gemini Script Generation with Satirical Content")
    print("=" * 60)
    
    try:
        from integrated_daily_mash_system import IntegratedDailyMashSystem
        
        system = IntegratedDailyMashSystem()
        
        print(f"[SCRIPT] Generating script for: {content_item['title'][:50]}...")
        print(f"[HUMOR] Humor type: {content_item['humor_type']}")
        
        # Generate script using the enhanced method
        script_data = system.generate_enhanced_video_script(
            source_content=content_item,
            num_segments=4,
            duration_per_segment=5.0
        )
        
        if not script_data or not script_data.get('Text'):
            print(f"[ERROR] Script generation failed")
            return False
        
        print(f"[OK] Script generated successfully!")
        print(f"\n[DETAILS] Script Details:")
        print(f"Title: {script_data['title']}")
        print(f"Total Duration: {script_data['total_duration']:.1f} seconds")
        print(f"Segments: {script_data['segment_count']}")
        print(f"Generated By: {script_data['generated_by']}")
        
        print(f"\n[CONTENT] Script Content:")
        print(f"Full Text: {script_data['Text']}")
        
        print(f"\n[SEGMENTS] Segment Breakdown:")
        for i, segment in enumerate(script_data['sentences'], 1):
            print(f"  {i}. {segment['sentence']}")
            print(f"     Duration: {segment['duration']/10000000:.1f}s | Words: {segment['word_count']}")
        
        return script_data
        
    except Exception as e:
        print(f"[ERROR] Error testing script generation: {e}")
        import traceback
        traceback.print_exc()
        return False

def test_video_generation_request(script_data, content_item):
    """Test video generation request format"""
    print("\n" + "=" * 60)
    print("TESTING: Video Generation Request Format")
    print("=" * 60)
    
    try:
        from integrated_daily_mash_system import IntegratedDailyMashSystem
        
        system = IntegratedDailyMashSystem()
        
        print(f"[VIDEO] Creating video generation request...")
        
        # Create the video generation request
        video_request = system.create_video_generation_request(script_data)
        
        print(f"[OK] Video request created successfully!")
        print(f"\n[REQUEST] Request Details:")
        print(f"Topic: {video_request['topic'][:100]}...")
        print(f"Style: {video_request['style']}")
        print(f"Segments: {video_request['num_segments']}")
        print(f"Source Type: {video_request['source_type']}")
        print(f"Humor Type: {video_request['humor_type']}")
        
        # Show the request in JSON format (what would be sent to Flask app)
        print(f"\n[JSON] JSON Request (for Flask /generate-video endpoint):")
        print(json.dumps(video_request, indent=2))
        
        return video_request
        
    except Exception as e:
        print(f"[ERROR] Error creating video request: {e}")
        import traceback
        traceback.print_exc()
        return False

def test_local_gemini_integration():
    """Test the local Gemini integration directly"""
    print("\n" + "=" * 60)
    print("TESTING: Local Gemini Integration (textGeneration_gemini.py)")
    print("=" * 60)
    
    try:
        from local_functions.textGeneration_gemini import generate_video_script
        
        # Test with satirical content
        test_topic = "Research reveals that arriving first at a party makes you the worst guest. Scientists have discovered this phenomenon through extensive party observation studies."
        
        print(f"[GEMINI] Testing Gemini with satirical content...")
        print(f"Topic: {test_topic[:80]}...")
        
        script_result = generate_video_script(
            topic=test_topic,
            style="informative",
            num_segments=3,
            duration_per_segment=4.0,
            source_content="Research reveals that arriving first at a party makes you the worst guest",
            humor_type="absurdist"
        )
        
        print(f"[OK] Local Gemini test successful!")
        print(f"Title: {script_result['title']}")
        print(f"Duration: {script_result['total_duration']:.1f}s")
        print(f"Generated by: {script_result['generated_by']}")
        
        print(f"\nScript text: {script_result['Text']}")
        
        return True
        
    except Exception as e:
        print(f"[ERROR] Error testing local Gemini: {e}")
        import traceback
        traceback.print_exc()
        return False

def run_complete_test():
    """Run the complete test suite"""
    print("[TEST] INTEGRATED DAILY MASH SYSTEM - COMPLETE TEST SUITE")
    print("=" * 80)
    print(f"Test started at: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    print("=" * 80)
    
    # Test 1: Content Fetching
    content_items = test_daily_mash_content_fetching()
    if not content_items:
        print("\n[FAILED] Cannot proceed without content items")
        return False
    
    # Test 2: Local Gemini Integration
    if not test_local_gemini_integration():
        print("\n[WARNING] Local Gemini integration has issues")
    
    # Test 3: Script Generation with first content item
    script_data = test_gemini_script_generation(content_items[0])
    if not script_data:
        print("\n[FAILED] Script generation failed")
        return False
    
    # Test 4: Video Generation Request
    video_request = test_video_generation_request(script_data, content_items[0])
    if not video_request:
        print("\n[FAILED] Video request creation failed")
        return False
    
    # Summary
    print("\n" + "=" * 80)
    print("[SUCCESS] ALL TESTS COMPLETED SUCCESSFULLY!")
    print("=" * 80)
    print("[OK] Daily Mash content fetching works")
    print("[OK] Gemini script generation works with satirical content")
    print("[OK] Video generation request format is correct")
    print("[OK] System is ready for frontend integration")
    
    print(f"\n[INTEGRATION] Integration Steps:")
    print("1. The integrated system can fetch satirical content from The Daily Mash")
    print("2. Enhanced Gemini prompts generate creative scripts using the satirical context")
    print("3. Video requests are properly formatted for your Flask app")
    print("4. You can now connect this to your frontend by:")
    print("   - Adding a route in flask_app.py to use the integrated system")
    print("   - Modifying the /generate-video endpoint to optionally use Daily Mash content")
    print("   - Adding a 'Use Daily Mash Content' checkbox to your frontend")
    
    return True

if __name__ == "__main__":
    try:
        success = run_complete_test()
        if success:
            print(f"\n[SUCCESS] Test completed successfully at {datetime.now().strftime('%H:%M:%S')}")
        else:
            print(f"\n[FAILED] Test failed at {datetime.now().strftime('%H:%M:%S')}")
            sys.exit(1)
    except KeyboardInterrupt:
        print(f"\n[WARNING] Test interrupted by user")
    except Exception as e:
        print(f"\n[ERROR] Unexpected error: {e}")
        import traceback
        traceback.print_exc()
        sys.exit(1)