#!/usr/bin/env python3
"""
Test script for enhanced video generation with Gemini + ElevenLabs
"""

import os
import sys
import time
from datetime import datetime

# Add local functions to path
sys.path.append(os.path.join(os.path.dirname(__file__), 'local_functions'))

def test_gemini_integration():
    """Test Gemini script generation"""
    print("=" * 50)
    print("TESTING GEMINI INTEGRATION")
    print("=" * 50)
    
    try:
        from textGeneration_gemini import generate_video_script, test_api_connection
        
        # Test API connection (this function doesn't exist in our implementation, so we'll skip)
        print("[TEST] Gemini script generation...")
        
        # Test script generation
        result = generate_video_script(
            topic="Artificial Intelligence",
            style="educational",
            num_segments=3,
            duration_per_segment=4.0
        )
        
        print(f"[OK] Script generated successfully!")
        print(f"   Title: {result['title']}")
        print(f"   Segments: {result['segment_count']}")
        print(f"   Duration: {result['total_duration']:.1f}s")
        print(f"   Generated by: {result.get('generated_by', 'unknown')}")
        
        # Show first segment
        if result['sentences']:
            first_segment = result['sentences'][0]
            print(f"   First segment: {first_segment['sentence'][:100]}...")
        
        return True
        
    except Exception as e:
        print(f"[ERROR] Gemini test failed: {e}")
        return False

def test_elevenlabs_integration():
    """Test ElevenLabs voice generation"""
    print("\\n" + "=" * 50)
    print("TESTING ELEVENLABS INTEGRATION")
    print("=" * 50)
    
    try:
        from textToSpeech_elevenlabs import generate_speech_local, test_api_connection
        
        # Test API connection
        print("[TEST] ElevenLabs API connection...")
        if test_api_connection():
            print("[OK] API connection successful")
        else:
            print("[WARNING] API connection test inconclusive")
        
        # Test speech generation
        print("[TEST] ElevenLabs speech generation...")
        test_text = "This is a test of the enhanced ElevenLabs integration for high quality text to speech."
        
        start_time = time.time()
        filename, duration = generate_speech_local(test_text, "en", None, 1.0)
        generation_time = time.time() - start_time
        
        print(f"[OK] Speech generated successfully!")
        print(f"   File: {filename}")
        print(f"   Duration: {duration:.1f}s")
        print(f"   Generation time: {generation_time:.1f}s")
        print(f"   File size: {os.path.getsize(filename) / 1024:.1f} KB")
        
        # Clean up test file
        if os.path.exists(filename):
            os.remove(filename)
            print(f"[CLEANUP] Removed test file: {filename}")
        
        return True
        
    except Exception as e:
        print(f"[ERROR] ElevenLabs test failed: {e}")
        return False

def test_full_integration():
    """Test complete video generation with both services"""
    print("\\n" + "=" * 50)
    print("TESTING FULL INTEGRATION")
    print("=" * 50)
    
    try:
        from local_video_generator import LocalVideoGenerator
        
        print("[TEST] Creating LocalVideoGenerator instance...")
        generator = LocalVideoGenerator("test_output")
        
        print("[TEST] Generating complete video...")
        start_time = time.time()
        
        result = generator.generate_video(
            topic="Machine Learning Basics",
            style="educational",
            num_segments=3,
            width=640,
            height=480,
            fps=24,
            quality_mode="fast"  # Use fast mode for testing
        )
        
        total_time = time.time() - start_time
        
        if result.get('success'):
            print(f"[OK] Full integration test successful!")
            print(f"   Total time: {total_time:.1f}s")
            print(f"   Final video: {result.get('final_video')}")
            print(f"   Session directory: {result.get('session_dir')}")
            print(f"   Video duration: {result.get('duration', 0):.1f}s")
        else:
            print(f"[ERROR] Full integration failed: {result.get('error')}")
            return False
        
        return True
        
    except Exception as e:
        print(f"[ERROR] Full integration test failed: {e}")
        return False

def main():
    """Run all integration tests"""
    print(f"Enhanced AI Video Generator Integration Test")
    print(f"Started at: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    print(f"Working directory: {os.getcwd()}")
    
    tests = [
        ("Gemini Integration", test_gemini_integration),
        ("ElevenLabs Integration", test_elevenlabs_integration),
        ("Full Integration", test_full_integration)
    ]
    
    results = {}
    
    for test_name, test_func in tests:
        print(f"\\n{'=' * 60}")
        print(f"RUNNING: {test_name}")
        print(f"{'=' * 60}")
        
        try:
            results[test_name] = test_func()
        except KeyboardInterrupt:
            print(f"\\n[INTERRUPTED] Test interrupted by user")
            break
        except Exception as e:
            print(f"[CRITICAL ERROR] {test_name} crashed: {e}")
            results[test_name] = False
    
    # Summary
    print(f"\\n{'=' * 60}")
    print("TEST SUMMARY")
    print(f"{'=' * 60}")
    
    for test_name, success in results.items():
        status = "PASS" if success else "FAIL"
        print(f"{test_name:<25} | {status}")
    
    total_tests = len(results)
    passed_tests = sum(results.values())
    
    print(f"\\nResults: {passed_tests}/{total_tests} tests passed")
    
    if passed_tests == total_tests:
        print("[SUCCESS] All tests passed! Enhanced integration is working.")
        return 0
    else:
        print("[WARNING] Some tests failed. Check the output above for details.")
        return 1

if __name__ == "__main__":
    exit_code = main()
    sys.exit(exit_code)